import json
import requests
import urllib
from flask import Flask, request, render_template, session
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

app = Flask(__name__)
app.config['SECRET_KEY'] = 'DaJXmdUBpvXSTPfYIo3PcbRI3lgHynaQ'


class IPQS:
    key = 'DaJXmdUBpvXSTPfYIo3PcbRI3lgHynaQ'

    def malicious_url_scanner_api(self, url: str, vars: dict = {}) -> dict:
        target_url = 'https://www.ipqualityscore.com/api/json/url/%s/%s' % (self.key, urllib.parse.quote_plus(url))
        x = requests.get(target_url, params=vars)
        return (json.loads(x.text))


@app.route('/')
def index():
    return render_template("index.html")


@app.route('/predict', methods=['GET', 'POST'])
def predict():
    target_url = request.form["target_url"]
    session['target_url'] = target_url
    ipqs = IPQS()
    result = ipqs.malicious_url_scanner_api(target_url)
    if 'success' in result and result['success'] == True:
        output = {
            'url': result['domain'],
            'ip_address': result['ip_address'],
            'country_code': result['country_code'],
            'language_code': result['language_code'],
            'server': result['server'],
            'content_type': result['content_type'],
            'risk_score': result['risk_score'],
            'status_code': result['status_code'],
            'page_size': result['page_size'],
            'domain_rank': result['domain_rank'],
            'dns_valid': result['dns_valid'],
            'suspicious': result['suspicious'],
            'phishing': result['phishing'],
            'malware': result['malware'],
            'parking': result['parking'],
            'spamming': result['spamming'],
            'adult': result['adult'],
            'category': result['category'],
            'domain_age': result['domain_age']['human'],
            'domain': result['domain']
        }
        return render_template('results.html', output=output, target_url=target_url)
    else:
        return "Error occurred while scanning the URL."


@app.route('/sandbox_view')
def sandbox_view():
    target_url = session.get('target_url')
    chrome_options = Options()
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options.add_argument('--no-sandbox')
    dcap = DesiredCapabilities.CHROME.copy()
    dcap['goog:loggingPrefs'] = {'performance': 'ALL'}
    driver = webdriver.Chrome(options=chrome_options, desired_capabilities=dcap)
    driver.set_window_size(1920, 1080)
    driver.get(target_url)
    performance_log = driver.get_log('performance')
    return render_template('sandbox_view.html', target_url=target_url, performance_log=performance_log)


if __name__ == '__main__':
    app.run(debug=True)