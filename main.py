from flask import Flask, render_template, request
import requests
import time

app = Flask(__name__)

# Define the ZAP API endpoint and API key
zap_api_endpoint = "http://127.0.0.1:8080/JSON"
api_key = "ulbptd4ggmqhcjvhrt4o50iuac"
@app.route("/")
def index():
    return render_template("index.html")


@app.route("/predict", methods=["GET", "POST"])
def predict():
    total_alerts = 0  # Initialize total alerts to zero
    summary_response = None  # Set initial value to None
    risk_counts = {'High': 0, 'Medium': 0, 'Low': 0, 'Informational': 0}  # Initialize risk counts to zero
    if request.method == "POST":
        # Get the target URL from the form
        target_url = request.form["target_url"]

        # Start a new session with ZAP
        session_response = requests.get(zap_api_endpoint + "/core/newSession/", params={"apikey": api_key})

        # Spider the target URL to discover all of its links and pages
        spider_response = requests.get(zap_api_endpoint + "/spider/action/scan/",
                                       params={"apikey": api_key, "url": target_url},
                                       headers={"Content-Type": "application/json"})

        # Wait for the spider to finish
        while int(requests.get(zap_api_endpoint + "/spider/view/status/", params={"apikey": api_key}).json()[
                      'status']) < 100:
            time.sleep(0.5)

        # Scan the target URL for vulnerabilities
        scan_response = requests.get(zap_api_endpoint + "/ascan/action/scan/",
                                     params={"apikey": api_key, "url": target_url},
                                     headers={"Content-Type": "application/json"})

        # Wait for the scan to finish
        while int(requests.get(zap_api_endpoint + "/ascan/view/status/", params={"apikey": api_key}).json()[
                      'status']) < 100:
            time.sleep(0.5)

        # Get a summary of the vulnerabilities found
        summary_response = requests.get(zap_api_endpoint + "/core/view/alerts/",
                                        params={"apikey": api_key, "baseurl": target_url},
                                        headers={"Content-Type": "application/json"})
        if summary_response is not None:
            summary = summary_response.json()
            alerts = summary["alerts"]
            total_alerts = len(alerts)  # Get the total number of alerts

            # Display the details of the vulnerabilities
            for alert in alerts:
                    risk = alert['risk']
                    if risk == 'High':
                        risk_counts['High'] += 1
                    elif risk == 'Medium':
                        risk_counts['Medium'] += 1
                    elif risk == 'Low':
                        risk_counts['Low'] += 1
                    elif risk == 'Informational':
                        risk_counts['Informational'] += 1

                    print("Alert: " + alert['name'])
                    print("Risk: " + alert['risk'])
                    print("Confidence: " + alert['confidence'])
                    print("Description: " + alert['description'])
                    print("Solution: " + alert['solution'])
                    print("Reference: " + alert['reference'])
                    print("\n")

        # Pass the results to the template
        return render_template("results.html", summary=summary, total_alerts=total_alerts,risk_counts=risk_counts)

    # Render the form template
    return render_template("index.html")



if __name__ == "__main__":
    app.run(debug=True)