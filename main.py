from flask import Flask, render_template, request
import requests
import time

app = Flask(__name__)

# Define the ZAP API endpoint and API key
zap_api_endpoint = "http://127.0.0.1:8080/JSON"
api_key = "umikmp352uos2kal3akvnag34p"
@app.route("/")
def index():
    return render_template("index.html")

@app.route("/predict", methods=["GET", "POST"])
def predict():
    summary_response = None  # Set initial value to None
    alert_details = {}  # Initialize empty dictionary to hold alert details
    if request.method == "POST":
        # Get the target URL from the form
        target_url = request.form["target_url"]

        # Start a new session with ZAP
        session_response = requests.get(zap_api_endpoint + "/core/newSession/", params={"apikey": api_key})

        # Spider the target URL to discover all of its links and pages
        spider_response = requests.get(zap_api_endpoint + "/spider/action/scan/", params={"apikey": api_key, "url": target_url}, headers={"Content-Type": "application/json"})

        # Wait for the spider to finish
        while int(requests.get(zap_api_endpoint + "/spider/view/status/", params={"apikey": api_key}).json()['status']) < 100:
            time.sleep(0.5)

        # Scan the target URL for vulnerabilities
        scan_response = requests.get(zap_api_endpoint + "/ascan/action/scan/", params={"apikey": api_key, "url": target_url}, headers={"Content-Type": "application/json"})

        # Wait for the scan to finish
        while int(requests.get(zap_api_endpoint + "/ascan/view/status/", params={"apikey": api_key}).json()['status']) < 100:
            time.sleep(0.5)

        # Get a summary of the vulnerabilities found
        summary_response = requests.get(zap_api_endpoint + "/core/view/alerts/", params={"apikey": api_key, "baseurl": target_url}, headers={"Content-Type": "application/json"})
        if summary_response is not None:
            summary = summary_response.json()
            alerts = summary["alerts"]
            num_high = 0
            num_medium = 0
            num_low = 0
            urls = []
            if summary_response is not None:
                for alert in alerts:
                    if alert["risk"] == "High":
                        num_high += alert.get("count", 0)
                    elif alert["risk"] == "Medium":
                        num_medium += alert.get("count", 0)
                    elif alert["risk"] == "Low":
                        num_low += alert.get("count", 0)
                    # Get details for each alert
                    alert_details[alert["id"]] = requests.get(
                        zap_api_endpoint + "/core/view/alert/",
                        params={"apikey": api_key, "id": alert["id"]},
                        headers={"Content-Type": "application/json"}
                    ).json()

            total = num_high + num_medium + num_low

        # Pass the results to the template
    return render_template(
        "results.html",
        summary=summary_response.text,
        num_high=num_high,
        num_medium=num_medium,
        num_low=num_low,
        urls=urls,
        alert_details=alert_details  # Pass alert details to template
    )

    # Render the form template
    return render_template("index.html")
if __name__ == "__main__":
    app.run(debug=True)