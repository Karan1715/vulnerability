from flask import Flask, render_template, request
import requests
import time

app = Flask(__name__)

# Define the ZAP API endpoint and API key
zap_api_endpoint = "http://127.0.0.1:8080/JSON"
api_key = "umikmp352uos2kal3akvnag34p"
@app.route("/")
def index():
    return render_template("index.html")

@app.route("/predict", methods=["GET", "POST"])
def predict():
    summary_response = None  # Set initial value to None
    if request.method == "POST":
        # Get the target URL from the form
        target_url = request.form["target_url"]

        # Start a new session with ZAP
        session_response = requests.get(zap_api_endpoint + "/core/newSession/", params={"apikey": api_key})

        # Spider the target URL to discover all of its links and pages
        spider_response = requests.get(zap_api_endpoint + "/spider/action/scan/", params={"apikey": api_key, "url": target_url}, headers={"Content-Type": "application/json"})

        # Wait for the spider to finish
        while int(requests.get(zap_api_endpoint + "/spider/view/status/", params={"apikey": api_key}).json()['status']) < 100:
            time.sleep(0.5)

        # Scan the target URL for vulnerabilities
        scan_response = requests.get(zap_api_endpoint + "/ascan/action/scan/", params={"apikey": api_key, "url": target_url}, headers={"Content-Type": "application/json"})

        # Wait for the scan to finish
        while int(requests.get(zap_api_endpoint + "/ascan/view/status/", params={"apikey": api_key}).json()['status']) < 100:
            time.sleep(0.5)


        # Get a summary of the vulnerabilities found
        summary_response = requests.get(zap_api_endpoint + "/core/view/alerts/", params={"apikey": api_key, "baseurl": target_url}, headers={"Content-Type": "application/json"})
    """ if summary_response is not None:
        # Calculate the percentage of issues found
            summary = summary_response.json()
            total = summary["alerts"][0]["count"]
            high = summary["alerts"][1]["count"]
            medium = summary["alerts"][2]["count"]
            low = summary["alerts"][3]["count"]
            percentage = round(((high + medium + low ) / total) * 100, 3)

        # Determine if the URL is safe or unsafe based on the percentage of issues found
            if percentage == 0:
                safety = "safe"
            elif percentage > 0 and percentage <= 50:
                safety = "probably safe"
            elif percentage > 50 and percentage <= 70:
                safety = "potentially unsafe"
            else:
                safety = "unsafe"   """

        # Pass the results to the template
    return render_template("results.html", summary=summary_response.text)# percentage=percentage, safety=safety)

    # Render the form template
    return render_template("index.html")

if __name__ == "__main__":
    app.run(debug=True)